

Unused terminals:


Grammar

Rule 1     stmt -> ID = stmt
Rule 2     stmt -> RANK ID ASSIGN = stmt
Rule 3     stmt -> expression
Rule 4     expression -> ID
Rule 5     expression -> STATE
Rule 6     expression -> LPAREN NUMBER COMMA NUMBER COMMA NUMBER RPAREN
Rule 7     expression -> LPAREN expression RPAREN
Rule 8     expression -> expression AND expression
Rule 9     expression -> expression OR expression
Rule 10    expression -> NOT expression

Terminals, with rules where they appear

=                    : 1 2
AND                  : 8
ASSIGN               : 2
COMMA                : 6 6
ID                   : 1 2 4
LPAREN               : 6 7
NOT                  : 10
NUMBER               : 6 6 6
OR                   : 9
RANK                 : 2
RPAREN               : 6 7
STATE                : 5
error                : 

Nonterminals, with rules where they appear

expression           : 3 7 8 8 9 9 10
stmt                 : 1 2 0


Parsing method: LALR


state 0

    (0) S' -> . stmt
    (1) stmt -> . ID = stmt
    (2) stmt -> . RANK ID ASSIGN = stmt
    (3) stmt -> . expression
    (4) expression -> . ID
    (5) expression -> . STATE
    (6) expression -> . LPAREN NUMBER COMMA NUMBER COMMA NUMBER RPAREN
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . expression AND expression
    (9) expression -> . expression OR expression
    (10) expression -> . NOT expression

    ID              shift and go to state 7
    RANK            shift and go to state 1
    STATE           shift and go to state 2
    LPAREN          shift and go to state 4
    NOT             shift and go to state 5


    expression                     shift and go to state 6
    stmt                           shift and go to state 3

state 1

    (2) stmt -> RANK . ID ASSIGN = stmt

    ID              shift and go to state 8



state 2

    (5) expression -> STATE .

    AND             reduce using rule 5 (expression -> STATE .)
    OR              reduce using rule 5 (expression -> STATE .)
    $end            reduce using rule 5 (expression -> STATE .)
    RPAREN          reduce using rule 5 (expression -> STATE .)



state 3

    (0) S' -> stmt .




state 4

    (6) expression -> LPAREN . NUMBER COMMA NUMBER COMMA NUMBER RPAREN
    (7) expression -> LPAREN . expression RPAREN
    (4) expression -> . ID
    (5) expression -> . STATE
    (6) expression -> . LPAREN NUMBER COMMA NUMBER COMMA NUMBER RPAREN
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . expression AND expression
    (9) expression -> . expression OR expression
    (10) expression -> . NOT expression

    NUMBER          shift and go to state 9
    ID              shift and go to state 11
    STATE           shift and go to state 2
    LPAREN          shift and go to state 4
    NOT             shift and go to state 5


    expression                     shift and go to state 10

state 5

    (10) expression -> NOT . expression
    (4) expression -> . ID
    (5) expression -> . STATE
    (6) expression -> . LPAREN NUMBER COMMA NUMBER COMMA NUMBER RPAREN
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . expression AND expression
    (9) expression -> . expression OR expression
    (10) expression -> . NOT expression

    ID              shift and go to state 11
    STATE           shift and go to state 2
    LPAREN          shift and go to state 4
    NOT             shift and go to state 5


    expression                     shift and go to state 12

state 6

    (3) stmt -> expression .
    (8) expression -> expression . AND expression
    (9) expression -> expression . OR expression

    $end            reduce using rule 3 (stmt -> expression .)
    AND             shift and go to state 13
    OR              shift and go to state 14



state 7

    (1) stmt -> ID . = stmt
    (4) expression -> ID .

    =               shift and go to state 15
    AND             reduce using rule 4 (expression -> ID .)
    OR              reduce using rule 4 (expression -> ID .)
    $end            reduce using rule 4 (expression -> ID .)



state 8

    (2) stmt -> RANK ID . ASSIGN = stmt

    ASSIGN          shift and go to state 16



state 9

    (6) expression -> LPAREN NUMBER . COMMA NUMBER COMMA NUMBER RPAREN

    COMMA           shift and go to state 17



state 10

    (7) expression -> LPAREN expression . RPAREN
    (8) expression -> expression . AND expression
    (9) expression -> expression . OR expression

    RPAREN          shift and go to state 18
    AND             shift and go to state 13
    OR              shift and go to state 14



state 11

    (4) expression -> ID .

    AND             reduce using rule 4 (expression -> ID .)
    OR              reduce using rule 4 (expression -> ID .)
    $end            reduce using rule 4 (expression -> ID .)
    RPAREN          reduce using rule 4 (expression -> ID .)



state 12

    (10) expression -> NOT expression .
    (8) expression -> expression . AND expression
    (9) expression -> expression . OR expression

    AND             reduce using rule 10 (expression -> NOT expression .)
    OR              reduce using rule 10 (expression -> NOT expression .)
    $end            reduce using rule 10 (expression -> NOT expression .)
    RPAREN          reduce using rule 10 (expression -> NOT expression .)

  ! AND             [ shift and go to state 13 ]
  ! OR              [ shift and go to state 14 ]


state 13

    (8) expression -> expression AND . expression
    (4) expression -> . ID
    (5) expression -> . STATE
    (6) expression -> . LPAREN NUMBER COMMA NUMBER COMMA NUMBER RPAREN
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . expression AND expression
    (9) expression -> . expression OR expression
    (10) expression -> . NOT expression

    ID              shift and go to state 11
    STATE           shift and go to state 2
    LPAREN          shift and go to state 4
    NOT             shift and go to state 5


    expression                     shift and go to state 19

state 14

    (9) expression -> expression OR . expression
    (4) expression -> . ID
    (5) expression -> . STATE
    (6) expression -> . LPAREN NUMBER COMMA NUMBER COMMA NUMBER RPAREN
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . expression AND expression
    (9) expression -> . expression OR expression
    (10) expression -> . NOT expression

    ID              shift and go to state 11
    STATE           shift and go to state 2
    LPAREN          shift and go to state 4
    NOT             shift and go to state 5


    expression                     shift and go to state 20

state 15

    (1) stmt -> ID = . stmt
    (1) stmt -> . ID = stmt
    (2) stmt -> . RANK ID ASSIGN = stmt
    (3) stmt -> . expression
    (4) expression -> . ID
    (5) expression -> . STATE
    (6) expression -> . LPAREN NUMBER COMMA NUMBER COMMA NUMBER RPAREN
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . expression AND expression
    (9) expression -> . expression OR expression
    (10) expression -> . NOT expression

    ID              shift and go to state 7
    RANK            shift and go to state 1
    STATE           shift and go to state 2
    LPAREN          shift and go to state 4
    NOT             shift and go to state 5


    expression                     shift and go to state 6
    stmt                           shift and go to state 21

state 16

    (2) stmt -> RANK ID ASSIGN . = stmt

    =               shift and go to state 22



state 17

    (6) expression -> LPAREN NUMBER COMMA . NUMBER COMMA NUMBER RPAREN

    NUMBER          shift and go to state 23



state 18

    (7) expression -> LPAREN expression RPAREN .

    AND             reduce using rule 7 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 7 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 7 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 7 (expression -> LPAREN expression RPAREN .)



state 19

    (8) expression -> expression AND expression .
    (8) expression -> expression . AND expression
    (9) expression -> expression . OR expression

    AND             reduce using rule 8 (expression -> expression AND expression .)
    OR              reduce using rule 8 (expression -> expression AND expression .)
    $end            reduce using rule 8 (expression -> expression AND expression .)
    RPAREN          reduce using rule 8 (expression -> expression AND expression .)

  ! AND             [ shift and go to state 13 ]
  ! OR              [ shift and go to state 14 ]


state 20

    (9) expression -> expression OR expression .
    (8) expression -> expression . AND expression
    (9) expression -> expression . OR expression

    OR              reduce using rule 9 (expression -> expression OR expression .)
    $end            reduce using rule 9 (expression -> expression OR expression .)
    RPAREN          reduce using rule 9 (expression -> expression OR expression .)
    AND             shift and go to state 13

  ! AND             [ reduce using rule 9 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 14 ]


state 21

    (1) stmt -> ID = stmt .

    $end            reduce using rule 1 (stmt -> ID = stmt .)



state 22

    (2) stmt -> RANK ID ASSIGN = . stmt
    (1) stmt -> . ID = stmt
    (2) stmt -> . RANK ID ASSIGN = stmt
    (3) stmt -> . expression
    (4) expression -> . ID
    (5) expression -> . STATE
    (6) expression -> . LPAREN NUMBER COMMA NUMBER COMMA NUMBER RPAREN
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . expression AND expression
    (9) expression -> . expression OR expression
    (10) expression -> . NOT expression

    ID              shift and go to state 7
    RANK            shift and go to state 1
    STATE           shift and go to state 2
    LPAREN          shift and go to state 4
    NOT             shift and go to state 5


    expression                     shift and go to state 6
    stmt                           shift and go to state 24

state 23

    (6) expression -> LPAREN NUMBER COMMA NUMBER . COMMA NUMBER RPAREN

    COMMA           shift and go to state 25



state 24

    (2) stmt -> RANK ID ASSIGN = stmt .

    $end            reduce using rule 2 (stmt -> RANK ID ASSIGN = stmt .)



state 25

    (6) expression -> LPAREN NUMBER COMMA NUMBER COMMA . NUMBER RPAREN

    NUMBER          shift and go to state 26



state 26

    (6) expression -> LPAREN NUMBER COMMA NUMBER COMMA NUMBER . RPAREN

    RPAREN          shift and go to state 27



state 27

    (6) expression -> LPAREN NUMBER COMMA NUMBER COMMA NUMBER RPAREN .

    AND             reduce using rule 6 (expression -> LPAREN NUMBER COMMA NUMBER COMMA NUMBER RPAREN .)
    OR              reduce using rule 6 (expression -> LPAREN NUMBER COMMA NUMBER COMMA NUMBER RPAREN .)
    $end            reduce using rule 6 (expression -> LPAREN NUMBER COMMA NUMBER COMMA NUMBER RPAREN .)
    RPAREN          reduce using rule 6 (expression -> LPAREN NUMBER COMMA NUMBER COMMA NUMBER RPAREN .)


